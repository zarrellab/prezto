set termguicolors

call plug#begin('~/.config/nvim/plugged')
Plug 'rakr/vim-one'
Plug 'vim-airline/vim-airline'
Plug 'pangloss/vim-javascript'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'mxw/vim-jsx'
Plug 'elzr/vim-json'
Plug 'chriskempson/base16-vim'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'octref/RootIgnore'
Plug 'myusuf3/numbers.vim'
Plug 'airblade/vim-gitgutter'
Plug 'w0rp/ale'
Plug 'junegunn/fzf.vim'
Plug '/usr/local/opt/fzf'
Plug 'airblade/vim-rooter'
Plug 'sirver/ultisnips'
Plug 'raimondi/delimitmate'
Plug 'tpope/vim-surround'
Plug 'valloric/matchtagalways'
Plug 'scrooloose/nerdcommenter'
Plug 'godlygeek/tabular'
Plug 'danro/rename.vim'
Plug 'rking/ag.vim'
Plug 'othree/html5.vim'
Plug 'cakebaker/scss-syntax.vim'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'leafgarland/typescript-vim'
Plug 'ianks/vim-tsx'
Plug 'tpope/vim-repeat'
Plug 'roxma/nvim-yarp'
Plug 'ncm2/ncm2', { 'do': ':UpdateRemotePlugins' }
Plug 'ncm2/ncm2-path'
Plug 'ncm2/ncm2-html-subscope'
Plug 'ncm2/ncm2-markdown-subscope'
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-jedi'
Plug 'ncm2/ncm2-tern'
Plug 'ncm2/ncm2-cssomni'
Plug 'ncm2/ncm2-match-highlight'
Plug 'ncm2/ncm2-ultisnips'
Plug 'SirVer/ultisnips'
Plug 'autozimu/LanguageClient-neovim', {
  \ 'branch': 'next',
  \ 'do': 'bash install.sh',
\ }
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'enricobacis/vim-airline-clock'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'vitalk/vim-simple-todo'

call plug#end()

""" python location for nvim
let g:python3_host_prog = '/usr/local/bin/python3'
let g:python_host_prog = '/usr/local/bin/python'

""" guttter numbers
nnoremap <F3> :NumbersToggle<CR>
nnoremap <F4> :NumbersOnOff<CR>

""" syntax highlighting
let g:javascript_plugin_jsdoc = 1
let g:jsx_ext_required = 0

""" linting
let g:airline#extensions#ale#enabled = 1
let g:ale_fixers = {
  \'javascript': ['eslint'],
  \'javascript.jsx': ['eslint'],
  \'typescript': ['tslint'],
  \'typescript.tsx': ['tslint'],
  \'markdown': ['prettier'],
  \'python': ['pylint'],
\}
let g:ale_fix_on_save = 1
" go to previous error
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
" go to next error
nmap <silent> <C-j> <Plug>(ale_next_wrap)
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '✘'

""" HTML JSX quick syntax
let g:user_emmet_leader_key='<C-M>'
" tag highlighting
let g:mta_filetypes = {
	\'javascript.jsx' : 1,
  \'typescript.tsx' : 1,
  \'html'           : 1,
  \'xhtml'          : 1,
  \'xml'            : 1,
  \'jinja'          : 1,
\}

""" NERDtree
" auto-open on directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" remove deleted files from tree
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeShowHidden=1
map <Tab>t :NERDTreeToggle<CR>
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let loaded_netrwPlugin = 1
let NERDTreeRespectWildIgnore = 1
" close vim if only tree is left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

""" searching
" search files; respect gitignore
nnoremap <silent> <Leader>/ :GitFiles<CR>
" search all files
nnoremap <silent> <Leader>' :Files<CR>
" search commits
nnoremap <silent> <Leader>; :Commits<CR>

""" tabs
set tabstop=2
set shiftwidth=2
set expandtab

""" colors
" enable base16 management
let g:airline_theme='base16'
set noshowmode
set background=dark

colorscheme base16-onedark

""" autocomplete
autocmd BufEnter * call ncm2#enable_for_buffer()
" enter menu to first item
set completeopt=noinsert,menuone
set shortmess+=c
" esc to leave menu
inoremap <c-c> <ESC>
let g:LanguageClient_autoStart = 1
let g:LanguageClient_serverCommands = {
  \ 'javascript': ['javascript-typescript-stdio'],
  \ 'typescript': ['javascript-typescript-stdio'],
  \ 'javascript.jsx': ['javascript-typescript-stdio'],
  \ 'typescript.tsx': ['javascript-typescript-stdio'],
  \ 'python': ['/usr/local/bin/pyls'],
\ }
" lang server keys
nnoremap <F5> :call LanguageClient_contextMenu()<CR>
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
" options
let g:ncm2#complete_length = [[1,3],[7,2]]
" style
let g:ncm2#match_highlight = 'sans-serif-bold'

""" gitgutter
" always open
set signcolumn=yes

""" misc maps
"save
nmap <silent> <Leader>s :w<CR>

""" clock
let g:airline#extensions#clock#format = '%-I:%M'

